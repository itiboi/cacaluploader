#!/usr/bin/env python
# coding=utf-8

import caldav
import logging
import requests
import sys

from datetime import datetime
from xml.etree import ElementTree

from cacaluploader import CalendarSynchronizer, CampusOfficeAuthorizationError, CalDAVUploadAdapter, \
    ExchangeUploadAdapter, CampusCalenderAdapter, ICalendarAdapter

log = logging.getLogger(__name__)

if __name__ == '__main__':
    # The script will try to load everything from a config file with following structure:
    # <?xml version="1.0" encoding="UTF-8" ?>
    # <synchronizer>
    #     <source type="campusoffice">
    #         <matno>matriculation number</matno>
    #         <password>password</password>
    #         <!-- optional: -->
    #         <period start="<year-month-day>" end="<year-month-day>"/>
    #     </source>
    #
    #     <source type="icalendar">
    #         <url>calendar url</url>
    #     </source>
    #
    #     <!-- only one targets per config is currently supported -->
    #     <target type="caldav">
    #         <url><calendar url></url>
    #         <username>username</username>
    #         <password>password</password>
    #     </target>
    #
    #     <target type="exchange">
    #         <ews_url>EWS base url</ews_url>
    #         <calendar_id>Exchange calendar id (optional)</calendar_id>
    #         <username>username</username>
    #         <password>password</password>
    #     </target>
    # </synchronizer>

    # Set up logger
    logging.basicConfig(format='%(asctime)s %(levelname)s: %(name)s: %(message)s', level=logging.INFO,
                        datefmt='%Y-%m-%d %H:%M:%S')
    log = logging.getLogger('cacaluploader')

    # Parse command line
    if len(sys.argv) != 2:
        log.error('Error: Incorrect use!')
        log.info(' cacaluploader <config-file>')
        exit()
    config_file = sys.argv[1]

    try:
        # Parse config file
        config = ElementTree.parse(config_file)

        # Parse source
        sources = list()
        for source in config.findall('/source'):
            source_type = source.get('type', None)

            if source_type == 'campusoffice':
                mat_number = source.findtext('matno')
                campus_pass = source.findtext('password')

                start_time = None
                end_time = None
                period = source.find('period')
                if period is not None:
                    start_time = datetime.strptime(period.get('start'), '%Y-%m-%d')
                    end_time = datetime.strptime(period.get('end'), '%Y-%m-%d')

                sources.append(CampusCalenderAdapter(mat_number, campus_pass))
            elif source_type == 'icalendar':
                url = source.findtext('url')
                sources.append(ICalendarAdapter(url))
            else:
                raise ValueError('Unknown source calendar specified: %s!' % source_type)

        # Parse upload calendar
        target = config.find('/target')

        target_type = target.get('type', None)
        if target_type == 'caldav':
            url = target.findtext('./url')
            username = target.findtext('./username')
            password = target.findtext('./password')
            upload_adapter = CalDAVUploadAdapter(url, username, password)
        elif target_type == 'exchange':
            ews_url = target.findtext('./ews_url')
            calendar_id = target.findtext('./calendar_id')
            username = target.findtext('./username')
            password = target.findtext('./password')

            if calendar_id is None:
                upload_adapter = ExchangeUploadAdapter(ews_url, username, password)
            else:
                upload_adapter = ExchangeUploadAdapter(ews_url, username, password, calendar_id)
        else:
            raise RuntimeError('Unknown target adapter specified: %s!' % target_type)

        # Start upload
        for source_adapter in sources:
            try:
                uploader = CalendarSynchronizer(source_adapter, upload_adapter)
                uploader.upload()
            except (requests.RequestException, CampusOfficeAuthorizationError) as e:
                log.error('Could not retrieve CampusOffice calendar: %s', e)
            except caldav.error.AuthorizationError as e:
                log.error('Could not access CalDAV calendar: Authorization failed')
            except caldav.error.NotFoundError as e:
                log.error('Could not find CalDAV calendar')
            except caldav.error.ReportError as e:
                log.error('Could not retrieve list of already existing events in CalDAV calendar')
            except caldav.error.DeleteError as e:
                log.error('Could not remove already existing event in CalDAV calendar')
            except caldav.error.PutError as e:
                log.error('Could not upload new event to CalDAV calendar')

    # Maybe catch many other things too :(
    except ValueError as e:
        log.error('Could not parse time period: %s', e)
